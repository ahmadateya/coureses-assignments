// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0): 1 else: 0
        ng;      // if (out < 0):  1, else: 0

    PARTS:
// General Rules.
// 1- in implementation you have to be sequential so compute every step and build for the next
// 2- compute every possible outcome 
// 3- use Mux as you if statement, to choose between options you computed in step 2

// making the zx the selector, we choose if zx = 0, pass x(as it is), if zx = 1, pass b (which is zero) 
    Mux16(a=x,b[0..15]=false,sel=zx,out=zdx); //Zero the x
    Not16(in=zdx,out=notx);                  //Not the x
    Mux16(a=zdx,b=notx,sel=nx,out=ndx);      //choose x or notx
// same for y
    Mux16(a=y,b[0..15]=false,sel=zy,out=zdy);   //Zero the y
    Not16(in=zdy,out=noty);                     //Not the y
    Mux16(a=zdy,b=noty,sel=ny,out=ndy);         //choose y or noty

// compute x+y and x&y, and then choose from them
    Add16(a=ndx,b=ndy,out=xplusy); //x+y
    And16(a=ndx,b=ndy,out=xandy);  //x&y
    Mux16(a=xandy,b=xplusy,sel=f,out=fxy);  //choose function (x+y or x&y)

    //choose fxy or notfxy based on no
    Not16(in=fxy,out=notfxy);      //not the output or not
    Mux16(a=fxy,b=notfxy,sel=no,out=out, out[15]=firstOut, out[0..7]=finalLeft, out[8..15]=finalRight);   


    // output == 0 (zr)
    Or8Way(in=finalLeft, out=zrl);
    Or8Way(in=finalRight, out=zrr);
    Or(a=zrl, b=zrr, out=nzr);
    Not(in=nzr, out=zr);

    // output < 0 (ng)
    And(a=firstOut, b=true, out=ng);
}